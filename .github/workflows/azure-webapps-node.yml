<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>สแกน QR Code AR</title>
    <!-- เรียกใช้ A-Frame และ AR.js -->
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://rawgit.com/jeromeetienne/ar.js/1.7.2/aframe/build/aframe-ar.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.min.js"></script>
    <script src="https://cdn.rawgit.com/mrdoob/three.js/r129/examples/js/loaders/FBXLoader.js"></script>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            overflow: hidden;
        }
        #scanner {
            text-align: center;
            margin-top: 50px;
        }
        button {
            padding: 10px 20px;
            font-size: 18px;
            margin-top: 20px;
            cursor: pointer;
        }
        /* เพิ่มฟิลเตอร์ให้กับวิดีโอ */
        #arView video {
            -webkit-filter: grayscale(50%) sepia(20%);
            filter: grayscale(50%) sepia(20%);
        }
    </style>
</head>
<body>

<div id="scanner">
    <h1>สแกน QR Code AR</h1>
    <p>นำกล้องของคุณสแกน QR Code เพื่อแสดงโมเดล 3D</p>
    <button id="startScan">เริ่มการสแกน</button>
</div>

<!-- ซ่อนส่วนการแสดง AR ก่อนจนกว่าจะสแกนสำเร็จ -->
<div id="arView" style="display:none;">
    <a-scene embedded arjs="sourceType: webcam;">
        <a-marker preset="hiro">
            <a-entity id="fbxModel"></a-entity>
        </a-marker>
        <a-entity camera></a-entity>
    </a-scene>
    <button id="exitAR">ออกจาก AR</button>
</div>

<script>
// เมื่อคลิกเริ่มการสแกน ให้ขอสิทธิ์การเข้าถึงกล้อง
document.getElementById('startScan').addEventListener('click', () => {
    // ขอการเข้าถึงกล้องหลัง
    navigator.mediaDevices.getUserMedia({ video: { facingMode: { exact: "environment" } } })
    .then((stream) => {
        // สิทธิ์กล้องได้รับการอนุมัติ
        startQRCodeScanner();
    })
    .catch((err) => {
        alert('ไม่สามารถเข้าถึงกล้องได้: ' + err);
    });
});

// ฟังก์ชันการแสดงผล AR หลังจากการสแกน QR Code สำเร็จ
function startQRCodeScanner() {
    document.getElementById('scanner').style.display = 'none';
    document.getElementById('arView').style.display = 'block';

    // โหลดโมเดล FBX และแสดงผลในตำแหน่งของ marker
    var loader = new THREE.FBXLoader();
    loader.load('path_to_fbx_file.fbx', function(object) {
        var model = document.querySelector('#fbxModel');
        model.setObject3D('mesh', object);
    });
}

// เมื่อคลิกปุ่ม "ออกจาก AR"
document.getElementById('exitAR').addEventListener('click', () => {
    document.getElementById('arView').style.display = 'none';
    document.getElementById('scanner').style.display = 'block';
});
</script>

</body>
</html># This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
